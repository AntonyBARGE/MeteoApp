// Mocks generated by Mockito 5.4.0 from annotations
// in meteo_app_barge_antony/test/domain/managers/weather_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:meteo_app_barge_antony/domain/entities/city_entity.dart' as _i7;
import 'package:meteo_app_barge_antony/domain/entities/weather_entity.dart'
    as _i12;
import 'package:meteo_app_barge_antony/domain/repositories/location_repository.dart'
    as _i2;
import 'package:meteo_app_barge_antony/domain/repositories/weather_repository.dart'
    as _i11;
import 'package:meteo_app_barge_antony/domain/use_cases/get_city_from_lat_long.dart'
    as _i4;
import 'package:meteo_app_barge_antony/domain/use_cases/get_current_location.dart'
    as _i8;
import 'package:meteo_app_barge_antony/domain/use_cases/usecase.dart' as _i9;
import 'package:meteo_app_barge_antony/foundation/error/failures.dart' as _i6;
import 'package:meteo_app_barge_antony/foundation/util/input_converter.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocationRepository_0 extends _i1.SmartFake
    implements _i2.LocationRepository {
  _FakeLocationRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetCityFromLatLong].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCityFromLatLong extends _i1.Mock
    implements _i4.GetCityFromLatLong {
  MockGetCityFromLatLong() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LocationRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeLocationRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.LocationRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.CityEntity>> call(
          _i4.LocationParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.CityEntity>>.value(
            _FakeEither_1<_i6.Failure, _i7.CityEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.CityEntity>>);
}

/// A class which mocks [GetCurrentLocation].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCurrentLocation extends _i1.Mock
    implements _i8.GetCurrentLocation {
  MockGetCurrentLocation() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LocationRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeLocationRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.LocationRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.CityEntity>> call(
          _i9.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.CityEntity>>.value(
            _FakeEither_1<_i6.Failure, _i7.CityEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.CityEntity>>);
}

/// A class which mocks [InputConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockInputConverter extends _i1.Mock implements _i10.InputConverter {
  MockInputConverter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Either<_i6.Failure, double> stringToDouble(
    String? string,
    double? maxValue,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #stringToDouble,
          [
            string,
            maxValue,
          ],
        ),
        returnValue: _FakeEither_1<_i6.Failure, double>(
          this,
          Invocation.method(
            #stringToDouble,
            [
              string,
              maxValue,
            ],
          ),
        ),
      ) as _i3.Either<_i6.Failure, double>);
  @override
  _i3.Either<_i6.Failure, double> latStringToDouble(String? string) =>
      (super.noSuchMethod(
        Invocation.method(
          #latStringToDouble,
          [string],
        ),
        returnValue: _FakeEither_1<_i6.Failure, double>(
          this,
          Invocation.method(
            #latStringToDouble,
            [string],
          ),
        ),
      ) as _i3.Either<_i6.Failure, double>);
  @override
  _i3.Either<_i6.Failure, double> longStringToDouble(String? string) =>
      (super.noSuchMethod(
        Invocation.method(
          #longStringToDouble,
          [string],
        ),
        returnValue: _FakeEither_1<_i6.Failure, double>(
          this,
          Invocation.method(
            #longStringToDouble,
            [string],
          ),
        ),
      ) as _i3.Either<_i6.Failure, double>);
  @override
  _i3.Either<_i6.Failure, DateTime> stringToDateTime(String? string) =>
      (super.noSuchMethod(
        Invocation.method(
          #stringToDateTime,
          [string],
        ),
        returnValue: _FakeEither_1<_i6.Failure, DateTime>(
          this,
          Invocation.method(
            #stringToDateTime,
            [string],
          ),
        ),
      ) as _i3.Either<_i6.Failure, DateTime>);
}

/// A class which mocks [WeatherRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRepository extends _i1.Mock implements _i11.WeatherRepository {
  MockWeatherRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i12.WeatherEntity>> getWeather(
    _i7.CityEntity? city,
    DateTime? day,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeather,
          [
            city,
            day,
          ],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i12.WeatherEntity>>.value(
                _FakeEither_1<_i6.Failure, _i12.WeatherEntity>(
          this,
          Invocation.method(
            #getWeather,
            [
              city,
              day,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i12.WeatherEntity>>);
}
