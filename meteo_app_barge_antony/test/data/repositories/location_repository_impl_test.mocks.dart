// Mocks generated by Mockito 5.4.0 from annotations
// in meteo_app_barge_antony/test/data/repositories/location_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:meteo_app_barge_antony/data/models/city_model.dart' as _i2;
import 'package:meteo_app_barge_antony/data/resources/remote/location_service.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCityModel_0 extends _i1.SmartFake implements _i2.CityModel {
  _FakeCityModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i3.LocationService {
  MockLocationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.CityModel> getCurrentLocationCity() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentLocationCity,
          [],
        ),
        returnValue: _i4.Future<_i2.CityModel>.value(_FakeCityModel_0(
          this,
          Invocation.method(
            #getCurrentLocationCity,
            [],
          ),
        )),
      ) as _i4.Future<_i2.CityModel>);
  @override
  _i4.Future<List<_i2.CityModel>> getCitiesFromName(String? cityName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCitiesFromName,
          [cityName],
        ),
        returnValue: _i4.Future<List<_i2.CityModel>>.value(<_i2.CityModel>[]),
      ) as _i4.Future<List<_i2.CityModel>>);
  @override
  _i4.Future<_i2.CityModel> getCityFromLatLong(
    double? latitude,
    double? longitude,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCityFromLatLong,
          [
            latitude,
            longitude,
          ],
        ),
        returnValue: _i4.Future<_i2.CityModel>.value(_FakeCityModel_0(
          this,
          Invocation.method(
            #getCityFromLatLong,
            [
              latitude,
              longitude,
            ],
          ),
        )),
      ) as _i4.Future<_i2.CityModel>);
}
