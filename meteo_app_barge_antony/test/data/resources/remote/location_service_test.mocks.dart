// Mocks generated by Mockito 5.4.0 from annotations
// in meteo_app_barge_antony/test/data/resources/remote/location_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:geolocator/geolocator.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

import 'geolocator_wrapper.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [GeolocatorWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeolocatorWrapper extends _i1.Mock implements _i2.GeolocatorWrapper {
  MockGeolocatorWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> get isLocationServiceEnabled => (super.noSuchMethod(
        Invocation.getter(#isLocationServiceEnabled),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<bool> get hasPermission => (super.noSuchMethod(
        Invocation.getter(#hasPermission),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Stream<bool> get onServiceEnabled => (super.noSuchMethod(
        Invocation.getter(#onServiceEnabled),
        returnValue: _i3.Stream<bool>.empty(),
      ) as _i3.Stream<bool>);
  @override
  _i3.Stream<_i4.Position> get onLocationUpdates => (super.noSuchMethod(
        Invocation.getter(#onLocationUpdates),
        returnValue: _i3.Stream<_i4.Position>.empty(),
      ) as _i3.Stream<_i4.Position>);
  @override
  _i3.Future<_i4.LocationPermission> checkPermission() => (super.noSuchMethod(
        Invocation.method(
          #checkPermission,
          [],
        ),
        returnValue: _i3.Future<_i4.LocationPermission>.value(
            _i4.LocationPermission.denied),
      ) as _i3.Future<_i4.LocationPermission>);
  @override
  double bearing(
    double? startLatitude,
    double? startLongitude,
    double? endLatitude,
    double? endLongitude,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #bearing,
          [
            startLatitude,
            startLongitude,
            endLatitude,
            endLongitude,
          ],
        ),
        returnValue: 0.0,
      ) as double);
  @override
  _i3.Future<bool> openAppSettings() => (super.noSuchMethod(
        Invocation.method(
          #openAppSettings,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<_i4.LocationPermission> requestPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestPermission,
          [],
        ),
        returnValue: _i3.Future<_i4.LocationPermission>.value(
            _i4.LocationPermission.denied),
      ) as _i3.Future<_i4.LocationPermission>);
  @override
  _i3.Future<bool> openLocationSettings() => (super.noSuchMethod(
        Invocation.method(
          #openLocationSettings,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<_i4.Position?> getCurrentPosition({
    _i4.LocationAccuracy? desiredAccuracy = _i4.LocationAccuracy.best,
    bool? forceAndroidLocationManager = false,
    Duration? timeLimit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentPosition,
          [],
          {
            #desiredAccuracy: desiredAccuracy,
            #forceAndroidLocationManager: forceAndroidLocationManager,
            #timeLimit: timeLimit,
          },
        ),
        returnValue: _i3.Future<_i4.Position?>.value(),
      ) as _i3.Future<_i4.Position?>);
  @override
  _i3.Future<_i4.Position?> getLastKnownPosition(
          {bool? forceAndroidLocationManager = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLastKnownPosition,
          [],
          {#forceAndroidLocationManager: forceAndroidLocationManager},
        ),
        returnValue: _i3.Future<_i4.Position?>.value(),
      ) as _i3.Future<_i4.Position?>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
